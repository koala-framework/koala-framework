var path = require("path");
var loaderUtils = require("loader-utils");
var fs = require("fs");
var ini = require('ini');
var asyncEach = require('async-each');
var lookupDependenciesIniPaths = require('./lookup-dependencies-ini-paths');

var dependencies = null;
var callbacks = [];
var finishedLoading = false;
var isLoading = false;

const configIni = ini.parse(fs.readFileSync('config.ini', 'utf-8'));
const uniquePrefix = configIni.production['application.uniquePrefix'];

module.exports = function(source, map) {
    var data = this.options;

    var query = loaderUtils.parseQuery(this.query);

    if (!query.dep) {
        this.emitError("Missing loader parameter dep");
        return;
    }

    this.cacheable();
    var callback = this.async();
    if (!callback) {
        this.emitError("Only async supported");
        return;
    }

    function processDependencies() {
        if (!dependencies[query.dep+'.files'] && !dependencies[query.dep+'.dep']) {
            console.log(dependencies);
            console.log(query.dep);
            throw new Error("dependency '"+query.dep+"' not found in ini file");
        }
        var dependency = dependencies[query.dep];

        var ret = "";

        if (dependencies[query.dep+'.dep']) {
            dependencies[query.dep+'.dep'].forEach(function(i) {
                i = i.replace(/ +$/g,"");
                if (i == 'Components') {
                    ret += "require('"+require.resolve('../loader-kwc/component-assets-loader')+"?defer=0!');\n;";
                } else if (i == 'ComponentsAdmin') {
                    ret += "require('"+require.resolve('../loader-kwc/component-admin-assets-loader')+"!');\n;"
                } else if (i == 'KwfDynamicAssetsVersion') {
                    //if (typeof Kwf == 'undefined') Kwf = {};".
                    //"Kwf.application = { assetsVersion: '".Kwf_Assets_Dispatcher::getInstance()->getAssetsVersion()."' };
                    ret += "Kwf.application = { assetsVersion: '123' };\n"; //TODO
                } else if (i == 'ViewsUser') {
                    //ret += "require.context('vendor/koala-framework/koala-framework/views/user', false, /\.scss$/);\n";
                    //ret += "require.context('./vendor/koala-framework/koala-framework/views/user', false, /\.scss$/);\n";
                    //ret += "require.context('./views/user', false, /\.scss$/);\n";
                    //ret += "require.context('kwf/views/user', false, /\.scss$/);\n";
                    //ret += "require.context('web/views/user', false, /\.scss$/);\n";
                    ret += "require('kwf/views/user/master.scss');\n";
                } else if (i == 'KwfTinyMce') {
                    ret += "if (!window.tinymce) window.tinymce = {};\n";
                    ret += "require('tinymce/dom/DomQuery');\n";
                    ret += "require('tinymce/LegacyInput');\n";
                    ret += "window.tinymce.Editor = require('tinymce/Editor');\n";
                    ret += "window.tinymce.EditorManager = require('tinymce/EditorManager');\n";
                } else if (i == 'Ext4AclController') {
                    //TODO
                } else {
                    ret += "require('"+require.resolve('./ini-loader')+"?dep="+i+"!');\n;"
                }
            }, this)
        }

        if (dependencies[query.dep+'.files']) {
            dependencies[query.dep+'.files'].forEach(function(i) {
                i = i.replace(/ +$/g,"");
                if (i.match(/\.js$/) && !dependencies[query.dep+'.commonJsEntry']) {
                    ret += "require('script-loader!" + require.resolve('./kwfup-loader') +"?uniquePrefix="+uniquePrefix + "!" +i+"');\n";
                } else {
                    ret += "require('"+i+"');\n";
                }

            }, this)
        }

        callback(null, ret);
    }

    var iniPaths = lookupDependenciesIniPaths();
    iniPaths.forEach(this.addDependency);

    if (finishedLoading) {
        //already loaded, just use them
        processDependencies.call(this);
        return;
    }

    //add to queue
    callbacks.push(function() {
        processDependencies.call(this);
    }.bind(this));

    if (isLoading) {
        //allready loading
        return;
    }

    dependencies = {};
    isLoading = true;
    asyncEach(iniPaths, function(item, next) {
        fs.readFile(item, 'utf-8', function(err, contents) {
            var deps = ini.parse(contents);
            if (!deps.dependencies) {
                this.emitError("dependencies section not found in ini file");
                return callback("dependencies section not found in ini file");
            }
            next(err, deps.dependencies);
        }.bind(this));
    }.bind(this), function(err, deps) {
        if (err) {
            callback(err);
            return;
        }
        deps.forEach(function(d) {
            for (i in d) {
                dependencies[i] = d[i];
            }
        }, this)
        finishedLoading = true;
        callbacks.forEach(function(cb) {
            cb();
        });
    }.bind(this));

};
