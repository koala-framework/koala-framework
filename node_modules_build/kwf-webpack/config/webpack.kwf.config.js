"use strict";
const webpack = require("webpack");
const path = require("path");
const fs = require("fs");
const ini = require("ini");
const BowerResolvePlugin = require("bower-resolve-webpack-plugin");
const lookupVendorPoFiles = require("../trl/lookup-vendor-po-files");
const lookupSassIncludePaths = require("../loader/lookup-sass-include-paths");
const lookupAliasPaths = require("../loader/lookup-alias-paths");
const TrlPlugin = require("@koala-framework/trl-webpack-plugin");
const fetchLanguages = require("../loader/fetch-languages");
const fetchKwfConfig = require("./fetch-kwf-config");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");

const kwfConfig = fetchKwfConfig();
const languages = fetchLanguages();
const configIni = ini.parse(fs.readFileSync("config.ini", "utf-8"));
const webCodeLangauge = configIni.production.webCodeLanguage;
const uniquePrefix = configIni.production["application.uniquePrefix"];
const devBuild = !!process.env.KWF_BUILD_DEV;

const plugins = [
    new TrlPlugin.default({
        uniquePrefix: uniquePrefix,
        languages: languages,
        webCodeLanguage: webCodeLangauge,
        translations: {
            web: TrlPlugin.loadTranslations(["trl/[language].po"], languages),
            kwf: TrlPlugin.loadTranslations(lookupVendorPoFiles(), languages),
        },
    }),
    new MiniCssExtractPlugin({
        filename: "[name].css",
        chunkFilename: "[id].css?v=[chunkhash]",
    }),
    new webpack.DefinePlugin({
        UNIQUE_PREFIX: JSON.stringify(uniquePrefix ? uniquePrefix + "-" : ""),
    }),
];

const postcssPlugins = [
    require("autoprefixer")({
        overrideBrowserslist: "> 0.05%",
        remove: true,
        add: true,
    }),
];

if (!devBuild) {
    plugins.push(
        new webpack.DefinePlugin({
            "process.env": {
                NODE_ENV: JSON.stringify("production"),
            },
        }),
    );
    postcssPlugins.push(
        require("cssnano")({
            preset: ['default', {
                mergeRules: false
            }]
        }),
    );
}

module.exports = {
    mode: devBuild ? "development" : "production",
    //devtool: "source-map", // or "inline-source-map"
    output: {
        path: process.cwd() + "/build/assets",
        publicPath: (kwfConfig["webpack-dev-server-url"] ? kwfConfig["webpack-dev-server-url"] : "/") + "assets/build/",
        filename: "[name].js",
        chunkFilename: "[id].js?v=[chunkhash]",
        jsonpFunction: uniquePrefix + "webpackJsonp",
        pathinfo: devBuild, //Include comments with information about the modules
    },
    module: {
        rules: [
            {
                test: /\.underscore\.tpl$/,
                loader: "underscore-template-loader",
                options: {
                    engine: "underscore",
                },
            },
            {
                enforce: "post",
                test: /\.s?css$/,
                use: [
                    MiniCssExtractPlugin.loader,
                    {
                        loader: path.resolve(__dirname, "../loader/kwfup-loader") + "?uniquePrefix=" + uniquePrefix,
                    },
                    {
                        loader: "css-loader",
                        options: {
                            import: false,
                        },
                    },
                    {
                        loader: "postcss-loader",
                        options: {
                            plugins: postcssPlugins,
                        },
                    },
                    {
                        loader: "sass-loader",
                        options: {
                            includePaths: lookupSassIncludePaths(),
                            data: '@import "config/global-settings";',
                        },
                    },
                ],
            },
            {
                enforce: "post",
                test: /\.(underscore\.tpl|jsx?|tsx?)$/,
                loader: path.resolve(__dirname, "../loader/kwfup-loader") + "?uniquePrefix=" + uniquePrefix,
            },
            {
                enforce: "post",
                test: /vendor\/koala-framework\/extjs2\/.*\.css$/,
                loader: require.resolve("../loader/ext2-css-loader"),
            },
            {
                test: /\.(png|jpg|gif|svg|eot|otf|ttf|woff|woff2)$/,
                loader: "file-loader",
                options: {
                    publicPath: (kwfConfig["webpack-dev-server-url"] ? kwfConfig["webpack-dev-server-url"] : "/") + "assets/build/",
                    name: "[path][name].[ext]",
                },
            },
        ],
    },
    resolve: {
        modules: ["node_modules", "vendor/bower_components"],
        descriptionFiles: ["package.json", "bower.json"],
        mainFields: ["browser", "module", "main"],
        plugins: [new BowerResolvePlugin()],
        alias: lookupAliasPaths(),
        extensions: [".js", ".json"],
    },
    resolveLoader: {
        modules: ["node_modules", "vendor/koala-framework/koala-framework/node_modules_build"],
    },
    stats: {
        children: false,
    },
    plugins: plugins,
    devServer: {
        disableHostCheck: true,
        stats: {
            children: false,
        },
        proxy: {
            "/assets": {
                target: kwfConfig["webpack-dev-server-proxy"],
                secure: false,
                changeOrigin: true,
            },
        },
        headers: {
            "Access-Control-Allow-Origin": "*",
        },
    },
};
