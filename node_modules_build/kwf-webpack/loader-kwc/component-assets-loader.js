var path = require("path");
var loaderUtils = require("loader-utils");
var fs = require("fs");

module.exports = function(source, map) {

    var query = loaderUtils.parseQuery(this.query);

    if (!query.defer) {
        this.emitError("Missing loader parameter defer");
        return;
    }
    var loadDefer = query.defer == '1';

    this.cacheable();
    /*
    var callback = this.async();
    if (!callback) {
        this.emitError("Only async supported");
        return;
    }
    */

    this.addDependency(process.cwd()+'/temp/component-assets-build/assets.json');
    const componentAssets = JSON.parse(fs.readFileSync(process.cwd()+'/temp/component-assets-build/assets.json'));


    var ret = '';
    if (loadDefer) {
        ret += "require('kwf/commonjs/frontend-core.defer.js');\n";
    } else {
        ret += "require('kwf/commonjs/frontend-core.js');\n;"
    }

    if (!loadDefer) {
        var url = require.resolve('./component-assets-loader')+"?defer=1!";
        ret += "require.ensure('"+url+"', function() { require('"+url+"'); });\n;";
    }

    for (var cmp in componentAssets) {
        var kwcClass = componentAssets[cmp].kwcClass;
        var kwcClassMaster = componentAssets[cmp].kwcClassMaster;
        componentAssets[cmp].files.forEach(function(asset) {
            var extension = path.extname(asset).substr(1);
            var isMaster = !!asset.match(/Master(\.defer)?\.[a-z]+$/);
            var isComponent = !!asset.match(/Component(\.override)?(\.defer)?\.[a-z]+$/);
            var cls = isMaster ? kwcClassMaster : kwcClass;
            var isDeferredAsset = !!asset.match(/\.defer\.[a-z]+$/);
            if (isDeferredAsset == loadDefer) {
                if (!isMaster && !isComponent) {
                    ret += "require('./"+asset+"');\n;"
                } else if (asset.match(/\.scss$/)) {
                    ret += "require('"+require.resolve('./component-file-loader')+"?ext="+extension+"&cls="+cls+"!"+require.resolve('./component-inject-sass-config-loader')+"?cls="+cmp+"!./"+asset+"')\n";
                } else {
                    ret += "require('"+require.resolve('./component-file-loader')+"?ext="+extension+"&cls="+cls+"!./"+asset+"');\n";
                }
            }
        }, this);
        var dep, files;
        if (!loadDefer) {
            dep = componentAssets[cmp].assets.dep;
            files = componentAssets[cmp].assets.files;
        } else {
            dep = componentAssets[cmp].assetsDefer.dep;
            files = componentAssets[cmp].assetsDefer.files;
        }
        dep.forEach(function(asset) {
            ret += "require('"+require.resolve('../loader/ini-loader')+"?dep="+asset+"!');\n";
        }, this);
        files.forEach(function(asset) {
            var extension = path.extname(asset).substr(1);
            var isMaster = !!asset.match(/Master(\.defer)?\.[a-z]+$/);
            var isComponent = !!asset.match(/Component(\.override)?(\.defer)?\.[a-z]+$/);
            var cls = isMaster ? kwcClassMaster : kwcClass;
            if (!isMaster && !isComponent) {
                ret += "require('"+asset+"');\n;"
            } else {
                ret += "require('"+require.resolve('./component-file-loader')+"?ext="+extension+"&cls="+cls+"!"+require.resolve('./component-inject-sass-config-loader')+"?cls="+cmp+"!"+asset+"');\n";
            }
        }, this);
    }

    //callback(null, ret);
    return ret;
};
